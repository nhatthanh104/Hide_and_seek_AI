"""
Template for student agent implementation.

INSTRUCTIONS:
1. Copy this file to submissions/<your_student_id>/agent.py
2. Implement the PacmanAgent and/or GhostAgent classes
3. Replace the simple logic with your search algorithm
4. Test your agent using: python arena.py --seek <your_id> --hide example_student

IMPORTANT:
- Do NOT change the class names (PacmanAgent, GhostAgent)
- Do NOT change the method signatures (step, __init__)
- You MUST return a Move enum value from step()
- You CAN add your own helper methods
- You CAN import additional Python standard libraries
"""
import time
from collections import deque
import math
import sys
from pathlib import Path

# Add src to path to import the interface
src_path = Path(__file__).parent.parent.parent / "src"
sys.path.insert(0, str(src_path))

from agent_interface import PacmanAgent as BasePacmanAgent
from agent_interface import GhostAgent as BaseGhostAgent
from environment import Move
import numpy as np


class PacmanAgent(BasePacmanAgent):
    """
    Pacman (Seeker) Agent - Goal: Catch the Ghost

    Implement your search algorithm to find and catch the ghost.
    Suggested algorithms: BFS, DFS, A*, Greedy Best-First
    """

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        # Path caching ƒë·ªÉ tr√°nh t√≠nh to√°n l·∫°i m·ªói step
        self.current_path = []
        self.last_enemy_pos = None
        
        print("üîµ Pacman Agent: A* search with path replanning activated!")

    def step(
        self,
        map_state: np.ndarray,
        my_position: tuple,
        enemy_position: tuple,
        step_number: int,
    ) -> Move:
        """
        üéØ A* SEARCH v·ªõi PATH REPLANNING
        
        Chi·∫øn l∆∞·ª£c:
        1. Ch·ªâ replan khi c·∫ßn thi·∫øt (Ghost di chuy·ªÉn xa ho·∫∑c ch∆∞a c√≥ path)
        2. Follow cached path ƒë·ªÉ ti·∫øt ki·ªám t√≠nh to√°n
        3. A* ƒë·∫£m b·∫£o lu√¥n t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng ng·∫Øn nh·∫•t
        
        Args:
            map_state: 2D numpy array where 1=wall, 0=empty
            my_position: Your current (row, col)
            enemy_position: Ghost's current (row, col)
            step_number: Current step number (starts at 1)

        Returns:
            Move: One of Move.UP, Move.DOWN, Move.LEFT, Move.RIGHT, Move.STAY
        """
        
        # ƒêi·ªÅu ki·ªán replan:
        # 1. Ch∆∞a c√≥ path
        # 2. L·∫ßn ƒë·∫ßu ch·∫°y (ch∆∞a bi·∫øt v·ªã tr√≠ Ghost tr∆∞·ªõc ƒë√≥)
        # 3. Ghost di chuy·ªÉn ƒë√°ng k·ªÉ (> 2 cells) - c√≥ th·ªÉ ƒë·ªïi h∆∞·ªõng
        should_replan = (
            not self.current_path or 
            self.last_enemy_pos is None or
            self._manhattan_distance(enemy_position, self.last_enemy_pos) > 2
        )
        
        if should_replan:
            # T√≠nh path m·ªõi b·∫±ng A*
            self.current_path = self._astar(my_position, enemy_position, map_state)
            self.last_enemy_pos = enemy_position
        
        # Follow cached path
        if self.current_path:
            next_move = self.current_path.pop(0)
            return next_move
        
        # Fallback: Kh√¥ng t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng (kh√¥ng th·ªÉ x·∫£y ra trong map li√™n th√¥ng)
        # Th·ª≠ di chuy·ªÉn g·∫ßn Ghost nh·∫•t
        best_move = Move.STAY
        best_distance = float('inf')
        
        for move in [Move.UP, Move.DOWN, Move.LEFT, Move.RIGHT]:
            dr, dc = move.value
            new_pos = (my_position[0] + dr, my_position[1] + dc)
            
            if self._is_valid_position(new_pos, map_state):
                distance = self._manhattan_distance(new_pos, enemy_position)
                if distance < best_distance:
                    best_distance = distance
                    best_move = move
        
        return best_move

    # Helper methods (you can add more)

    def _is_valid_move(self, pos: tuple, move: Move, map_state: np.ndarray) -> bool:
        """Check if a move from pos is valid."""
        delta_row, delta_col = move.value
        new_pos = (pos[0] + delta_row, pos[1] + delta_col)
        return self._is_valid_position(new_pos, map_state)

    def _is_valid_position(self, pos: tuple, map_state: np.ndarray) -> bool:
        """Check if a position is valid (not a wall and within bounds)."""
        row, col = pos
        height, width = map_state.shape

        if row < 0 or row >= height or col < 0 or col >= width:
            return False

        return map_state[row, col] == 0
    
    def _manhattan_distance(self, pos1, pos2):
        """T√≠nh kho·∫£ng c√°ch Manhattan gi·ªØa 2 v·ªã tr√≠."""
        return abs(pos1[0] - pos2[0]) + abs(pos1[1] - pos2[1])
    
    def _astar(self, start, goal, map_state):
        """
        A* Search: T√¨m ƒë∆∞·ªùng ng·∫Øn nh·∫•t t·ª´ start ƒë·∫øn goal.
        
        A* = Best-First Search + Heuristic
        f(n) = g(n) + h(n)
        - g(n): Cost t·ª´ start ƒë·∫øn n (s·ªë b∆∞·ªõc ƒë√£ ƒëi)
        - h(n): Heuristic ∆∞·ªõc l∆∞·ª£ng t·ª´ n ƒë·∫øn goal (Manhattan distance)
        
        Args:
            start: V·ªã tr√≠ b·∫Øt ƒë·∫ßu (row, col)
            goal: V·ªã tr√≠ ƒë√≠ch (row, col)
            map_state: B·∫£n ƒë·ªì
            
        Returns:
            List[Move]: Danh s√°ch c√°c b∆∞·ªõc ƒëi, ho·∫∑c [] n·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c
        """
        from heapq import heappush, heappop
        
        # Priority queue: (f_cost, g_cost, position, path)
        # g_cost ƒë·ªÉ break tie khi f_cost b·∫±ng nhau
        frontier = [(0, 0, start, [])]
        visited = set()
        
        while frontier:
            f_cost, g_cost, current_pos, path = heappop(frontier)
            
            # ƒê·∫øn ƒë√≠ch!
            if current_pos == goal:
                return path
            
            # ƒê√£ thƒÉm r·ªìi ‚Üí b·ªè qua
            if current_pos in visited:
                continue
            
            visited.add(current_pos)
            
            # Explore 4 h∆∞·ªõng
            for move in [Move.UP, Move.DOWN, Move.LEFT, Move.RIGHT]:
                dr, dc = move.value
                next_pos = (current_pos[0] + dr, current_pos[1] + dc)
                
                # Ki·ªÉm tra valid v√† ch∆∞a thƒÉm
                if next_pos not in visited and self._is_valid_position(next_pos, map_state):
                    new_path = path + [move]
                    new_g_cost = len(new_path)  # Cost t·ª´ start (s·ªë b∆∞·ªõc)
                    h_cost = self._manhattan_distance(next_pos, goal)  # Heuristic
                    new_f_cost = new_g_cost + h_cost  # Total cost
                    
                    heappush(frontier, (new_f_cost, new_g_cost, next_pos, new_path))
        
        # Kh√¥ng t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng
        return []


class GhostAgent(BaseGhostAgent):
    """
    Ghost (Hider) Agent - Goal: Avoid being caught

    Implement your search algorithm to evade Pacman as long as possible.
    Suggested algorithms: BFS (find furthest point), Minimax, Monte Carlo
    """

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        # TODO: Initialize any data structures you need
        pass

    def step(
        self,
        map_state: np.ndarray,
        my_position: tuple,
        enemy_position: tuple,
        step_number: int,
    ) -> Move:
        """
        K·∫øt h·ª£p Minimax (g·∫ßn) v√† Predictive BFS (xa)

        Args:
            map_state: 2D numpy array where 1=wall, 0=empty
            my_position: Your current (row, col)
            enemy_position: Pacman's current (row, col)
            step_number: Current step number (starts at 1)

        Returns:
            Move: One of Move.UP, Move.DOWN, Move.LEFT, Move.RIGHT, Move.STAY
        """
        # T√≠nh kho·∫£ng c√°ch ƒë·∫øn Pacman
        distance_to_pacman = self._calculate_manhattan_distance(my_position, enemy_position)
        
        # V√πng nguy hi·ªÉm : N·∫øu g·∫ßn Pacman (<=6) ‚Üí d√πng Minimax ƒë·ªÉ ch·ªçn n∆∞·ªõc ƒëi t·ªët nh·∫•t
        if distance_to_pacman <= 6:
            depth = 3  # G·∫ßn - depth trung b√¨nh
            if distance_to_pacman <= 3:
                depth = 4  # R·∫•t g·∫ßn - depth cao
                
            #G·ªçi minimax v·ªõi depth=3
            _, best_move = self._minimax(
                my_position, enemy_position, 
                depth=depth,  # Nh√¨n tr∆∞·ªõc 3 b∆∞·ªõc
                is_ghost_turn=True, 
                map_state=map_state
            )
            
            # N·∫øu minimax tr·∫£ v·ªÅ move h·ª£p l·ªá -> d√πng
            if best_move != Move.STAY:
                return best_move
            
            # Fallback n·∫øu minimax th·∫•t b·∫°i
            return self._greedy_escape(my_position, enemy_position, map_state)
        
        # V√πng an to√†n : Pacman XA (> 6 cells) ‚Üí D√πng PREDICTIVE BFS
        else:
            # B∆∞·ªõc 1 - D·ª± ƒëo√°n Pacman s·∫Ω ·ªü ƒë√¢u 
            predicted_enemy_pos = self._predict_enemy_position(
                enemy_position, my_position, map_state
            )
            
            # B∆∞·ªõc 2 - T√¨m v·ªã tr√≠ xa predicted position
            safe_positions = self._find_safe_positions(
                map_state, my_position, predicted_enemy_pos, top_k=5
            )
            
            if not safe_positions:
                return self._greedy_escape(my_position, enemy_position, map_state)
            
            # B∆∞·ªõc 3 - Ch·ªçn v·ªã tr√≠ c√≥ nhi·ªÅu l·ªëi tho√°t nh·∫•t  
            best_position = max(
                safe_positions,
                key=lambda pos: self._count_escape_routes(pos, map_state)
            )
            
            # B∆∞·ªõc 4 - Di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ ƒë√≥
            next_move = self._get_next_move(my_position, best_position, map_state)
            
            return next_move if next_move else Move.STAY
        
        
        # # B∆∞·ªõc 1: T√¨m top 5 v·ªã tr√≠ xa Pacman nh·∫•t b·∫±ng BFS
        # safe_positions = self._find_safe_positions(
        #     map_state, my_position, enemy_position, top_k=5
        # )

        # # N·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c v·ªã tr√≠ n√†o ‚Üí d√πng fallback (ch·∫°y ng∆∞·ª£c h∆∞·ªõng)
        # if not safe_positions:
        #     return self._greedy_escape(my_position, enemy_position, map_state)

        # # B∆∞·ªõc 2: Trong 5 v·ªã tr√≠ xa nh·∫•t, ch·ªçn v·ªã tr√≠ c√≥ NHI·ªÄU L·ªêI THO√ÅT NH·∫§T
        # # max() v·ªõi key=lambda s·∫Ω ch·ªçn v·ªã tr√≠ c√≥ _count_escape_routes() cao nh·∫•t
        # best_position = max(
        #     safe_positions,
        #     key=lambda pos: self._count_escape_routes(pos, map_state)
        # )

        # # B∆∞·ªõc 3: T√¨m b∆∞·ªõc ƒëi ƒê·∫¶U TI√äN ƒë·ªÉ ƒë·∫øn v·ªã tr√≠ best_position
        # next_move = self._get_next_move(my_position, best_position, map_state)

        # # Tr·∫£ v·ªÅ b∆∞·ªõc ƒëi (ho·∫∑c STAY n·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c)
        # return next_move if next_move else Move.STAY

    # Helper methods (you can add more)

    def _is_valid_move(self, pos: tuple, move: Move, map_state: np.ndarray) -> bool:
        """Check if a move from pos is valid."""
        delta_row, delta_col = move.value
        new_pos = (pos[0] + delta_row, pos[1] + delta_col)
        return self._is_valid_position(new_pos, map_state)

    def _is_valid_position(self, pos: tuple, map_state: np.ndarray) -> bool:
        """Check if a position is valid (not a wall and within bounds)."""
        row, col = pos
        height, width = map_state.shape

        if row < 0 or row >= height or col < 0 or col >= width:
            return False

        return map_state[row, col] == 0

    def _calculate_manhattan_distance(self, pos1, pos2):
        # T√≠nh kho·∫£ng c√°ch Manhattan gi·ªØa hai v·ªã tr√≠
        # Manhattan distance = |row1 - row2| + |col1 - col2|
        return abs(pos1[0] - pos2[0]) + abs(pos1[1] - pos2[1])

    def _find_safe_positions(self, map_state, my_pos, enemy_pos, top_k=5):
        """ 
        T√¨m top_k v·ªã tr√≠ xa Pacman nh·∫•t m√† Ghost c√≥ th·ªÉ ƒë·∫øn ƒë∆∞·ª£c

        # S·ª≠ d·ª•ng BFS ƒë·ªÉ duy·ªát to√†n b·ªô map v√† t√¨m c√°c v·ªã tr√≠ xa nh·∫•t

        # Returns v·ªÅ list c√°c v·ªã tr√≠ [(row, col), ...] xa Pacman nh·∫•t
        """

        # B∆∞·ªõc 1: Chu·∫©n b·ªã BFS

        visited = set()                # L∆∞u c√°c √¥ ƒë√£ thƒÉm
        queue = deque([(my_pos, 0)])         # Queue: (v·ªã tr√≠, kho·∫£ng c√°ch t·ª´ ghost)
        visited.add(my_pos)
        positions_with_distance = []         # L∆∞u: (v·ªã tr√≠, kho·∫£ng c√°ch ƒë·∫øn Pacman)

        # B∆∞·ªõc 2: BFS duy·ªát to√†n b·ªô map
        while queue:
            current_pos, dist_from_start = queue.popleft()

            # T√≠nh kho·∫£ng c√°ch Manhattan t·ª´ current_pos ƒë·∫øn Pacman
            dist_to_enemy = self._calculate_manhattan_distance(current_pos, enemy_pos)

            # L∆∞u v·ªã tr√≠ n√†y c√πng kho·∫£ng c√°ch ƒë·∫øn Pacman
            positions_with_distance.append((current_pos, dist_to_enemy))

            # Duy·ªát 4 h∆∞·ªõng (UP, DOWN, LEFT, RIGHT)
            for move in [Move.UP, Move.DOWN, Move.LEFT, Move.RIGHT]:
                dr, dc = move.value  # L·∫•y delta_row, delta_col
                new_pos = (current_pos[0] + dr, current_pos[1] + dc)

                # Ki·ªÉm tra new_pos c√≥ h·ª£p l·ªá kh√¥ng?
                #           Ch∆∞a ƒë∆∞·ª£c thƒÉm (not in visited)
                #           H·ª£p l·ªá (_is_valid_position)
                if new_pos not in visited and self._is_valid_position(new_pos, map_state):
                    visited.add(new_pos)
                    queue.append((new_pos, dist_from_start + 1))

        # B∆∞·ªõc 3: S·∫Øp x·∫øp theo kho·∫£ng c√°ch ƒë·∫øn Pacman (gi·∫£m d·∫ßn)
        # V·ªã tr√≠ xa nh·∫•t s·∫Ω ·ªü ƒë·∫ßu list
        positions_with_distance.sort(key=lambda x: x[1], reverse=True)

        # B∆∞·ªõc 4: Tr·∫£ v·ªÅ top_k v·ªã tr√≠ (ch·ªâ l·∫•y v·ªã tr√≠, b·ªè kho·∫£ng c√°ch)
        return [pos for pos, dist in positions_with_distance[:top_k]]

    def _count_escape_routes(self, pos, map_state):
        """
        ƒê·∫øm s·ªë l·ªëi tho√°t t·ª´ m·ªôt v·ªã tr√≠
            
        Returns:
            int: S·ªë l∆∞·ª£ng √¥ tr·ªëng xung quanh (0-4)
        """
        count = 0

        # Duy·ªát 4 h∆∞·ªõng v√† ƒë·∫øm s·ªë √¥ h·ª£p l·ªá
        for move in [Move.UP, Move.DOWN, Move.LEFT, Move.RIGHT]:
            dr, dc = move.value
            neighbor_pos = (pos[0] + dr, pos[1] + dc)

            if self._is_valid_position(neighbor_pos, map_state):
                count += 1

        return count

    def _get_next_move(self, start, goal, map_state):
        """
        T√¨m b∆∞·ªõc ƒëi ƒë·∫ßu ti√™n ƒë·ªÉ ƒëi t·ª´ start ƒë·∫øn goal.
        
        S·ª≠ d·ª•ng BFS ƒë·ªÉ t√¨m ƒë∆∞·ªùng ng·∫Øn nh·∫•t, r·ªìi tr·∫£ v·ªÅ b∆∞·ªõc ƒë·∫ßu ti√™n.
        
        Returns:
            Move: B∆∞·ªõc ƒëi ƒë·∫ßu ti√™n (UP/DOWN/LEFT/RIGHT/STAY)
        """
        from collections import deque

        if start == goal:
            return Move.STAY

        # BFS v·ªõi l∆∞u path (ƒë∆∞·ªùng ƒëi)
        visited = {start}
        queue = deque([(start, [])])  # (v·ªã tr√≠, [list c√°c move ƒë√£ ƒëi])

        while queue:
            pos, path = queue.popleft()

            # Th·ª≠ 4 h∆∞·ªõng
            for move in [Move.UP, Move.DOWN, Move.LEFT, Move.RIGHT]:
                dr, dc = move.value
                new_pos = (pos[0] + dr, pos[1] + dc)

                # N·∫øu ƒë·∫øn ƒë√≠ch ‚Üí tr·∫£ v·ªÅ b∆∞·ªõc ƒê·∫¶U TI√äN trong path
                if new_pos == goal:
                    if path:  # N·∫øu ƒë√£ c√≥ path tr∆∞·ªõc ƒë√≥
                        return path[0]
                    else:     # N·∫øu goal ngay c·∫°nh start
                        return move

                # N·∫øu ch∆∞a thƒÉm v√† h·ª£p l·ªá ‚Üí th√™m v√†o queue
                if new_pos not in visited and self._is_valid_position(new_pos, map_state):
                    visited.add(new_pos)
                    new_path = path + [move]  # Th√™m move v√†o path
                    queue.append((new_pos, new_path))

        # Kh√¥ng t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng ‚Üí ƒë·ª©ng y√™n
        return Move.STAY

    def _greedy_escape(self, my_pos, enemy_pos, map_state):
        """
        Fallback: Ch·∫°y ng∆∞·ª£c h∆∞·ªõng Pacman ƒë∆°n gi·∫£n (d√πng khi kh√¥ng t√¨m ƒë∆∞·ª£c v·ªã tr√≠ t·ªët).
        
        Returns:
            Move: B∆∞·ªõc ƒëi tr√°nh Pacman
        """
        row_diff = my_pos[0] - enemy_pos[0]
        col_diff = my_pos[1] - enemy_pos[1]

        # Ch·∫°y ng∆∞·ª£c h∆∞·ªõng Pacman
        if abs(row_diff) > abs(col_diff):
            move = Move.DOWN if row_diff > 0 else Move.UP
        else:
            move = Move.RIGHT if col_diff > 0 else Move.LEFT

        # Ki·ªÉm tra move c√≥ h·ª£p l·ªá kh√¥ng
        if self._is_valid_move(my_pos, move, map_state):
            return move

        # N·∫øu kh√¥ng h·ª£p l·ªá, th·ª≠ c√°c h∆∞·ªõng kh√°c
        for move in [Move.UP, Move.DOWN, Move.LEFT, Move.RIGHT]:
            if self._is_valid_move(my_pos, move, map_state):
                return move

        return Move.STAY
    
    def _predict_enemy_position(self, enemy_pos, my_pos, map_state):
        """
        D·ª± ƒëo√°n Pacman s·∫Ω di chuy·ªÉn ƒë·∫øn ƒë√¢u 
    
        Gi·∫£ ƒë·ªãnh: Pacman s·∫Ω ch·ªçn b∆∞·ªõc ƒëi g·∫ßn Ghost nh·∫•t (greedy)
        
        Returns:
            tuple: V·ªã tr√≠ d·ª± ƒëo√°n c·ªßa Pacman ·ªü b∆∞·ªõc ti·∫øp theo
        """
        best_move = Move.STAY
        best_distance = float('inf')  # Pacman mu·ªën minimize kho·∫£ng c√°ch
        
        #Duy·ªát 4 h∆∞·ªõng Pacman c√≥ th·ªÉ ƒëi
        for move in [Move.UP, Move.DOWN, Move.LEFT, Move.RIGHT]:
            dr, dc = move.value
            new_pos = (enemy_pos[0] + dr, enemy_pos[1] + dc)
            
            #Ki·ªÉm tra valid
            if not self._is_valid_position(new_pos, map_state):
                continue
            
            #T√≠nh kho·∫£ng c√°ch t·ª´ new_pos ƒë·∫øn Ghost (my_pos)
            distance = self._calculate_manhattan_distance(new_pos, my_pos)
            
            #Pacman ch·ªçn move l√†m distance nh·ªè nh·∫•t
            if distance < best_distance:
                best_distance = distance
                best_move = move
        
        #Apply move ƒë·ªÉ c√≥ predicted position
        if best_move != Move.STAY:
            dr, dc = best_move.value
            return (enemy_pos[0] + dr, enemy_pos[1] + dc)
        
        return enemy_pos  
        
    def _minimax(self, my_pos, enemy_pos, depth, is_ghost_turn, map_state):
        """
        Minimax algorithm cho Ghost 
        
        Ghost = Maximizing player (mu·ªën xa Pacman)
        Pacman = Minimizing player (mu·ªën g·∫ßn Ghost)
        
        Args:
            depth: S·ªë b∆∞·ªõc nh√¨n tr∆∞·ªõc (3-4 l√† t·ªët)
            is_ghost_turn: True = l∆∞·ª£t Ghost, False = l∆∞·ª£t Pacman
            
        Returns:
            (score, best_move): Score l√† kho·∫£ng c√°ch, move l√† n∆∞·ªõc ƒëi t·ªët nh·∫•t
        """
        
        # H·∫øt depth ho·∫∑c b·ªã b·∫Øt
        if depth == 0 or my_pos == enemy_pos:
            #Return kho·∫£ng c√°ch Manhattan
            distance = self._calculate_manhattan_distance(my_pos, enemy_pos)
            return distance, Move.STAY
        
        if is_ghost_turn:  # L∆∞·ª£t Ghost - MAXIMIZE distance
            best_score = -float('inf')
            best_move = Move.STAY
            
            #Th·ª≠ 4 h∆∞·ªõng Ghost c√≥ th·ªÉ ƒëi
            for move in [Move.UP, Move.DOWN, Move.LEFT, Move.RIGHT]:
                dr, dc = move.value
                new_pos = (my_pos[0] + dr, my_pos[1] + dc)
                
                #Ki·ªÉm tra valid
                if not self._is_valid_position(new_pos, map_state):
                    continue
                
                #G·ªçi ƒë·ªá quy - l∆∞·ª£t Pacman (is_ghost_turn=False)
                score, _ = self._minimax(new_pos, enemy_pos, depth - 1, False, map_state)
                
                #C·∫≠p nh·∫≠t best n·∫øu score CAO h∆°n (maximize)
                if score > best_score:
                    best_score = score
                    best_move = move
            
            return best_score, best_move
        
        else:  #L∆∞·ª£t Pacman - MINIMIZE distance
            best_score = float('inf')
            best_move = Move.STAY
            
            #Th·ª≠ 4 h∆∞·ªõng Pacman c√≥ th·ªÉ ƒëi
            for move in [Move.UP, Move.DOWN, Move.LEFT, Move.RIGHT]:
                dr, dc = move.value
                new_pos = (enemy_pos[0] + dr, enemy_pos[1] + dc)
                
                #Ki·ªÉm tra valid
                if not self._is_valid_position(new_pos, map_state):
                    continue
                
                #G·ªçi ƒë·ªá quy - l∆∞·ª£t Ghost (is_ghost_turn=True)
                score, _ = self._minimax(my_pos, new_pos, depth - 1, True, map_state)
                
                #C·∫≠p nh·∫≠t best n·∫øu score TH·∫§P h∆°n (minimize)
                if score < best_score:
                    best_score = score
                    best_move = move
            
            return best_score, best_move